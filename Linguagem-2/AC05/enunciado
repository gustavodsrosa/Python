EXERCÍCIO 01 – LISTAS
Preencha uma lista com 10 números sorteados aleatoriamente (utilize a função randint do
módulo random para sortear os números).
---------------------------------------------------------------------------------------
EXERCÍCIO 02 – TRATAMENTO DE EXCEÇÕES
Preencha uma lista com 5 nomes de pessoas, informados pelo usuário.
a. Criar uma função que recebe como parâmetro de entrada a lista e uma posição (índice)
dessa lista e retorna o nome que está nessa posição. 

- Essa função deve gerar e tratar uma exceção do tipo IndexError caso o índice
não exista na lista.
---------------------------------------------------------------------------------------
EXERCÍCIO 03 – ORIENTAÇÃO A OBJETOS
Implemente uma classe Carro

Atributos:
 quantidade_combustivel (quantidade de litros de combustível no tanque do carro): a 
quantidade inicial deve ser zero.
Métodos:
 adicionar_combustivel: recebe uma quantidade de litros de combustível para abastecer o
tanque.
 obter_combustivel: retorna a quantidade atual de combustível.
 andar: recebe uma distância em km e simula o ato de dirigir o veículo por essa distância,
reduzindo o nível de combustível no tanque de gasolina. Considere que o veiculo consome
0.20 litros de combustivel por quilômetro percorrido.
Faça um programa para testar a classe Carro.
---------------------------------------------------------------------------------------
EXERCÍCIO 4 – RELACIONAMENTO DE CLASSES
Implemente o diagrama de classes abaixo.

Classe Emprego

Atributos:
 cargo
 area
 salario
 bonus: percentual de bonificação a ser acrescentado ao salário do funcionário, de
acordo com a quantidade de dependentes. Por exemplo, se o bônus for de 2%, e o
funcionário tiver 3 dependentes, ele receberá 6% de acréscimo sobre o salário.
Métodos:
 não possui

Classe Pessoa
Atributos:
 nome
 fone
 email
 emprego: objeto do tipo Emprego
 dependentes: lista de objetos do tipo Pessoa
Métodos:
 calcular_salario: retorna o valor do salário do funcionário, de acordo com o
percentual de bonificação e quantidade de dependentes.
---------------------------------------------------------------------------------------
EXERCÍCIO 5 – ENCAPSULAMENTO
Implemente a classe CarroCorrida

Classe CarroCorrida
Atributos (todos privados):
 numero: número de identificação do carro 
 piloto: nome do piloto do carro ao carro
 velocidade_maxima: velocidade máxima do carro em km/h 
 velocidade_atual: velocidade atual do carro em km/h (valor inicial deve ser zero)
 ligado: informa se o carro está ligado (valor inicial deve ser False)

Métodos:
 ligar: define o carro como ligado
 desligar: define o carro como desligado
 acelerar: aumenta velocidade atual do carro em N km/h. O carro só pode acelerar
se estiver ligado. Ao acelerar, o carro nunca pode ultrapassar a sua velocidade
máxima
 frear: define a velocidade atual do carro em 0 km/h. 

Criar os métodos get e set, quando for necessário.
---------------------------------------------------------------------------------------
EXERCÍCIO 6 – HERANÇA
Uma universidade necessita de um sistema que facilite a sua gestão acadêmica. Implemente as
classes de modo que obedeçam os relacionamentos apresentados no diagrama abaixo:

Sabe-se que um professor é um funcionário. Além de professores, há funcionários que são
técnicos administrativos. 
Para cada funcionário, independente de ser professor ou técnico, é necessário saber seu nome,
endereço, telefone, cpf e salário. 
Especificamente para professores, é necessário saber sua titulação e as disciplinas que ele
leciona.
Especificamente para técnicos administrativos, é necessário saber seu cargo.
Para cada aluno é necessário saber seu nome, endereco, telefone, cpf e as disciplinas que ele
cursa.
Para cada disciplina é necessário registrar seu nome.
---------------------------------------------------------------------------------------
EXERCÍCIO 7 - POLIMORFISMO
Implemente o diagrama abaixo utilizando polimorfismo para calcular as operações matemáticas.
 
A classe Operacao deve ser abstrata. O método calcular da classe Operação também deve ser
abstrato.

As demais classes são concretas e devem implementar o método calcular. Esse método deve
realizar a operação e retornar o resultado.
Observe que as classes não possuem atributos, portanto não precisam ter construtores.

Utilize o trecho de programa para testar suas classes
